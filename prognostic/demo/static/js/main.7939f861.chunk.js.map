{"version":3,"sources":["components/navigationBar.jsx","components/allocation_tab/allocation_view/projectContainer.jsx","components/allocation_tab/allocation_view/totalContainer.jsx","components/allocation_tab/allocation_view/allocationView.jsx","components/allocation_tab/persons_list/search.jsx","components/allocation_tab/allocationTab.jsx","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","state","isOpen","toggleCollapse","_this","setState","react_default","a","createElement","mdbreact","color","dark","expand","className","onClick","this","id","navbar","left","active","to","nav","caret","right","href","React","Component","options","width","height","start","Date","editable","zoomMax","zoomMin","align","stack","type","ProjectContainer","props","name","build_default","items","groups","group","end","content","AllocationView","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","projects","getProjects","i","push","totalContainer","projectContainer","getGroups","users","Search","searchString","handleChange","bind","assertThisInitialized","refs","search","focus","value","_users","trim","toLowerCase","length","filter","user","match","ref","onChange","placeholder","map","l","email","AllocationTab","persons_list_search","allocationView","App","Fragment","navigationBar","allocation_tab_allocationTab","Boolean","window","location","hostname","app","BrowserRouter_default","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7939f861.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar, NavbarBrand, NavbarNav, NavItem, NavLink, NavbarToggler, Collapse, FormInline, Dropdown, DropdownToggle, DropdownMenu,  DropdownItem } from \"mdbreact\";\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\n\r\n\r\nclass NavigationBar extends React.Component {\r\n  state = {\r\n    isOpen: false\r\n  };\r\n\r\n  toggleCollapse = this.setState({ isOpen: !this.state.isOpen });\r\n\r\n  render() {\r\n    return (\r\n\r\n      <Navbar color=\"black\" dark expand=\"md\">\r\n          <NavbarBrand>\r\n            <strong className=\"white-text\">PROGNOSTIC</strong>\r\n          </NavbarBrand>\r\n          <NavbarToggler\r\n            onClick={this.toggleCollapse}\r\n          />\r\n          <Collapse\r\n            id=\"navbarCollapse3\"\r\n            isOpen={this.state.isOpen}\r\n            navbar\r\n          >\r\n            <NavbarNav left>\r\n              <NavItem active>\r\n                <NavLink to=\"#!\">People</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink to=\"#!\">Projects</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink to=\"#!\">Allocation</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink to=\"#!\">Spending</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink to=\"#!\">Remaning</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink to=\"#!\">End Balance</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <Dropdown>\r\n                  <DropdownToggle nav caret>\r\n                    <div className=\"d-none d-md-inline\">Add</div>\r\n                  </DropdownToggle>\r\n                  <DropdownMenu right>\r\n                    <DropdownItem href=\"#!\">Staff</DropdownItem>\r\n                    <DropdownItem href=\"#!\">Project</DropdownItem>\r\n                  </DropdownMenu>\r\n                </Dropdown>\r\n              </NavItem>\r\n            </NavbarNav>\r\n            <NavbarNav right>\r\n            <strong className=\"white-text\">//</strong>\r\n            </NavbarNav>\r\n          </Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n/* Need to type this after creating a component so other files can import it */\r\n\r\nexport default NavigationBar;\r\n","import React, { Component } from \"react\";\r\nimport Timeline from \"react-visjs-timeline\";\r\n\r\n/* options for the timeline */\r\nconst options = {\r\n  width: \"100%\",\r\n  height: \"570px\",\r\n  start: new Date(),\r\n  editable: true,\r\n  zoomMax: 1000 * 60 * 60 * 24 * 24 * 250,\r\n  zoomMin: 1000 * 60 * 60 * 24 * 24,\r\n  align: \"left\",\r\n  stack: false,\r\n  type: \"range\",\r\n  /* onAdd: function (item, callback) {\r\n     item.content = \"DUMMY\";\r\n     callback(item);\r\n   },\r\n   onMove: function (item, callback) {\r\n     alert(\"MOVED: \" + item.content);\r\n     callback(item);\r\n   } */\r\n};\r\n\r\n\r\nclass ProjectContainer extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"prog-av-container\">\r\n        <div>{this.props.name}</div>\r\n        <Timeline options={options} items={this.props.items} groups={this.props.groups} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectContainer;\r\n","import React, { Component } from \"react\";\r\nimport Timeline from \"react-visjs-timeline\";\r\n\r\n/* options for the timeline */\r\nconst options = {\r\n    width: \"100%\",\r\n    height: \"150px\",\r\n    start: new Date(),\r\n    editable: false,\r\n    zoomMax: 1000 * 60 * 60 * 24 * 24 * 250,\r\n    zoomMin: 1000 * 60 * 60 * 24 * 24,\r\n    align: \"left\",\r\n    stack: false,\r\n    type: \"range\"\r\n    /*  onAdd: function (item, callback) {\r\n          item.content = \"DUMMY\";\r\n          callback(item);\r\n      },\r\n      onMove: function (item, callback) {\r\n          alert(\"MOVED: \" + item.content);\r\n          callback(item);\r\n      } */\r\n};\r\n\r\n\r\nclass ProjectContainer extends Component {\r\n    state = {};\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"prog-av-total\">\r\n                <div className=\"prog-av-name\">{this.props.name}</div>\r\n                <Timeline options={options} items={this.props.items} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProjectContainer;\r\n","import React, { Component } from \"react\";\r\nimport ProjectContainer from './projectContainer';\r\nimport TotalContainer from './totalContainer';\r\n\r\n/*\r\n  The allocationView is responsible for fetching all projects and setting up it's child\r\n  components correctly through props. \r\n\r\n*/\r\n\r\n\r\nconst groups = [\r\n  {\r\n    id: 1,\r\n    content: 'Project 1'\r\n    // Optional: a field 'className', 'style', 'order', [properties]\r\n  },\r\n  {\r\n    id: 2,\r\n    content: 'Project 2'\r\n    // Optional: a field 'className', 'style', 'order', [properties]\r\n  },\r\n  {\r\n    id: 3,\r\n    content: 'Project 3'\r\n    // Optional: a field 'className', 'style', 'order', [properties]\r\n  },\r\n  {\r\n    id: 4,\r\n    content: 'Project 4'\r\n    // Optional: a field 'className', 'style', 'order', [properties]\r\n  },\r\n  {\r\n    id: 5,\r\n    content: 'Project 5'\r\n    // Optional: a field 'className', 'style', 'order', [properties]\r\n  }\r\n];\r\n\r\n\r\n/* items on the timeline */\r\nconst items = [\r\n  {\r\n    id: 1,\r\n    group: 0,\r\n    start: new Date(2018, 11, 1),\r\n    end: new Date(2018, 11, 4), // end is optional\r\n    content: \"allocation\",\r\n  }\r\n];\r\n\r\nconst SIZE = 10;\r\n\r\nclass AllocationView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      projects: []\r\n    };\r\n\r\n    this.getProjects();\r\n  }\r\n\r\n  getProjects() {\r\n    for (var i = 1; i <= SIZE; i++) {\r\n      this.state.projects.push({ name: \"Project\" + i });\r\n    }\r\n\r\n  }\r\n\r\n  getGroups() {\r\n    var groups = [];\r\n\r\n    for (var i = 0; i < SIZE; i++) {\r\n      groups.push({ id: i, content: this.state.projects[i].name });\r\n    }\r\n\r\n    return groups;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"prog-av\">\r\n        <div className=\"prog-av-user\">Leia Skywalker</div>\r\n        <TotalContainer name={\"Total\"} />\r\n        <ProjectContainer items={items} groups={this.getGroups()} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AllocationView;\r\n","import React, { Component } from \"react\";\r\n\r\nlet users = [\r\n    {\r\n        name: \"Vijay\",\r\n    },\r\n    {\r\n        name: \"Chris\",\r\n    },\r\n    {\r\n        name: \"erika\",\r\n\r\n    },\r\n    {\r\n        name: \"Filip\",\r\n\r\n    },\r\n    {\r\n        name: \"abc\",\r\n\r\n    },\r\n    {\r\n        name: \"cde\",\r\n    },\r\n    {\r\n        name: \"cgh\",\r\n    },\r\n\r\n];\r\n\r\nclass Search extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchString: \"\",\r\n            users: []\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            users: users\r\n        });\r\n        this.refs.search.focus();\r\n    }\r\n\r\n    handleChange() {\r\n        this.setState({\r\n            searchString: this.refs.search.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let _users = this.state.users;\r\n        let search = this.state.searchString.trim().toLowerCase();\r\n\r\n        if (search.length > 0) {\r\n            _users = _users.filter(function (user) {\r\n                return user.name.toLowerCase().match(search);\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div className=\"pg-search\">\r\n                <h3>search persons</h3>\r\n                <div>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={this.state.searchString}\r\n                        ref=\"search\"\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"type name here\"\r\n                    />\r\n                    <ul>\r\n                        {_users.map(l => {\r\n                            return (\r\n                                <li>\r\n                                    {l.name} <a href=\"#\">{l.email}</a>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\r\nimport AllocationView from \"./allocation_view/allocationView\";\r\nimport Search from \"./persons_list/search\";\r\nimport \"./allocationTab.css\"\r\n\r\nclass AllocationTab extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"prog-at\">\r\n        <Search />\r\n        <AllocationView />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default AllocationTab;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport NavigationBar from \"./components/navigationBar\";\r\nimport AllocationTab from \"./components/allocation_tab/allocationTab\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      /*  Attach the diffenrent components her to build the whole UI */\r\n      <React.Fragment>\r\n        <NavigationBar />\r\n        <AllocationTab />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport BrowserRouter from 'react-router-dom/BrowserRouter';\r\n\r\nconst app = (\r\n    <BrowserRouter>\r\n    <App />\r\n    </BrowserRouter>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}